/*
 * @flow
 */

import moment from 'moment';
import { List, Map } from 'immutable';

import { formatAsDate } from '../../utils/DateUtils';
import {
  // ReportInfoView
  CAD_NUMBER_FQN,
  COMPANION_OFFENSE_REPORT_FQN,
  COMPLAINT_NUMBER_FQN,
  DATE_TIME_OCCURRED_FQN,
  DATE_TIME_REPORTED_FQN,
  DISPATCH_REASON_FQN,
  INCIDENT_FQN,
  LOCATION_OF_INCIDENT_FQN,
  OL_ID_FQN,
  ON_VIEW_FQN,
  POST_OF_OCCURRENCE_FQN,
  UNIT_FQN,
  // ConsumerInfoView
  ADDRESS_FQN,
  PHONE_FQN,
  MILITARY_STATUS_FQN,
  GENDER_FQN,
  RACE_FQN,
  AGE_FQN,
  DOB_FQN,
  HOMELESS_FQN,
  HOMELESS_LOCATION_FQN,
  DRUGS_ALCOHOL_FQN,
  DRUG_TYPE_FQN,
  PRESCRIBED_MEDICATION_FQN,
  TAKING_MEDICATION_FQN,
  PREV_PSYCH_ADMISSION_FQN,
  SELF_DIAGNOSIS_FQN,
  SELF_DIAGNOSIS_OTHER_FQN,
  ARMED_WITH_WEAPON_FQN,
  ARMED_WEAPON_TYPE_FQN,
  ACCESS_TO_WEAPONS_FQN,
  ACCESSIBLE_WEAPON_TYPE_FQN,
  OBSERVED_BEHAVIORS_FQN,
  OBSERVED_BEHAVIORS_OTHER_FQN,
  EMOTIONAL_STATE_FQN,
  EMOTIONAL_STATE_OTHER_FQN,
  PHOTOS_TAKEN_OF_FQN,
  INJURIES_FQN,
  INJURIES_OTHER_FQN,
  SUICIDAL_FQN,
  SUICIDAL_ACTIONS_FQN,
  SUICIDE_ATTEMPT_METHOD_FQN,
  SUICIDE_ATTEMPT_METHOD_OTHER_FQN,
  DIRECTED_AGAINST_FQN,
  DIRECTED_AGAINST_OTHER_FQN,
  HIST_DIRECTED_AGAINST_FQN,
  HIST_DIRECTED_AGAINST_OTHER_FQN,
  HISTORY_OF_VIOLENCE_FQN,
  HISTORY_OF_VIOLENCE_TEXT_FQN,
  SCALE_1_TO_10_FQN,
  // Person
  PERSON_DOB_FQN,
  PERSON_LAST_NAME_FQN,
  PERSON_FIRST_NAME_FQN,
  PERSON_MIDDLE_NAME_FQN,
  PERSON_RACE_FQN,
  PERSON_SEX_FQN,
  PERSON_ID_FQN,
  PERSON_PICTURE_FQN,
  // ComplainantInfoView
  COMPLAINANT_NAME_FQN,
  COMPLAINANT_ADDRESS_FQN,
  COMPLAINANT_RELATIONSHIP_FQN,
  COMPLAINANT_PHONE_FQN,
  // DispositionInfoView
  DEESCALATION_SCALE_FQN,
  DEESCALATION_TECHNIQUES_FQN,
  DEESCALATION_TECHNIQUES_OTHER_FQN,
  DISPOSITION_FQN,
  HOSPITAL_TRANSPORT_INDICATOR_FQN,
  HOSPITAL_FQN,
  HOSPITAL_NAME_FQN,
  INCIDENT_NARRATIVE_FQN,
  REFERRAL_DEST_FQN,
  REFERRAL_PROVIDER_INDICATOR_FQN,
  SPECIAL_RESOURCES_CALLED_FQN,
  STABILIZED_INDICATOR_FQN,
  TRANSPORTING_AGENCY_FQN,
  VOLUNTARY_ACTION_INDICATOR_FQN,
  // OfficerInfoView
  OFFICER_NAME_FQN,
  OFFICER_SEQ_ID_FQN,
  OFFICER_INJURIES_FQN,
  OFFICER_CERTIFICATION_FQN,
} from '../../edm/DataModelFqns';

function gatherReportData(data :Map<*, *>) :{[key :string] :any} {

  const result = {
    [CAD_NUMBER_FQN]: data.getIn([CAD_NUMBER_FQN, 0]),
    [COMPANION_OFFENSE_REPORT_FQN]: data.getIn([COMPANION_OFFENSE_REPORT_FQN, 0]),
    [COMPLAINT_NUMBER_FQN]: data.getIn([COMPLAINT_NUMBER_FQN, 0]),
    [DATE_TIME_OCCURRED_FQN]: data.getIn([DATE_TIME_OCCURRED_FQN, 0], ''),
    [DATE_TIME_REPORTED_FQN]: data.getIn([DATE_TIME_REPORTED_FQN, 0], ''),
    [DISPATCH_REASON_FQN]: data.getIn([DISPATCH_REASON_FQN, 0]),
    [INCIDENT_FQN]: data.getIn([INCIDENT_FQN, 0]),
    [LOCATION_OF_INCIDENT_FQN]: data.getIn([LOCATION_OF_INCIDENT_FQN, 0]),
    [OL_ID_FQN]: data.getIn([OL_ID_FQN, 0], ''),
    [ON_VIEW_FQN]: data.getIn([ON_VIEW_FQN, 0]),
    [POST_OF_OCCURRENCE_FQN]: data.getIn([POST_OF_OCCURRENCE_FQN, 0]),
    [UNIT_FQN]: data.getIn([UNIT_FQN, 0]),
  };

  return result;
}

function gatherConsumerData(data :Map<*, *>) :{[key :string] :any} {

  const result = {
    [ADDRESS_FQN]: data.getIn([ADDRESS_FQN, 0]),
    [PHONE_FQN]: data.getIn([PHONE_FQN, 0]),
    [MILITARY_STATUS_FQN]: data.getIn([MILITARY_STATUS_FQN, 0]),
    [AGE_FQN]: data.getIn([AGE_FQN, 0]),
    [HOMELESS_FQN]: data.getIn([HOMELESS_FQN, 0]),
    [HOMELESS_LOCATION_FQN]: data.getIn([HOMELESS_LOCATION_FQN, 0]),
    [DRUGS_ALCOHOL_FQN]: data.getIn([DRUGS_ALCOHOL_FQN, 0]),
    [DRUG_TYPE_FQN]: data.getIn([DRUG_TYPE_FQN, 0]),
    [PRESCRIBED_MEDICATION_FQN]: data.getIn([PRESCRIBED_MEDICATION_FQN, 0]),
    [TAKING_MEDICATION_FQN]: data.getIn([TAKING_MEDICATION_FQN, 0]),
    [PREV_PSYCH_ADMISSION_FQN]: data.getIn([PREV_PSYCH_ADMISSION_FQN, 0]),
    [SELF_DIAGNOSIS_OTHER_FQN]: data.getIn([SELF_DIAGNOSIS_OTHER_FQN, 0]),
    [ARMED_WITH_WEAPON_FQN]: data.getIn([ARMED_WITH_WEAPON_FQN, 0]),
    [ARMED_WEAPON_TYPE_FQN]: data.getIn([ARMED_WEAPON_TYPE_FQN, 0]),
    [ACCESS_TO_WEAPONS_FQN]: data.getIn([ACCESS_TO_WEAPONS_FQN, 0]),
    [ACCESSIBLE_WEAPON_TYPE_FQN]: data.getIn([ACCESSIBLE_WEAPON_TYPE_FQN, 0]),
    [OBSERVED_BEHAVIORS_OTHER_FQN]: data.getIn([OBSERVED_BEHAVIORS_OTHER_FQN, 0]),
    [EMOTIONAL_STATE_OTHER_FQN]: data.getIn([EMOTIONAL_STATE_OTHER_FQN, 0]),
    [INJURIES_OTHER_FQN]: data.getIn([INJURIES_OTHER_FQN, 0]),
    [SUICIDAL_FQN]: data.getIn([SUICIDAL_FQN, 0]),
    [SUICIDE_ATTEMPT_METHOD_OTHER_FQN]: data.getIn([SUICIDE_ATTEMPT_METHOD_OTHER_FQN, 0]),
    [DIRECTED_AGAINST_OTHER_FQN]: data.getIn([DIRECTED_AGAINST_OTHER_FQN, 0]),
    [HIST_DIRECTED_AGAINST_OTHER_FQN]: data.getIn([HIST_DIRECTED_AGAINST_OTHER_FQN, 0]),
    [HISTORY_OF_VIOLENCE_FQN]: data.getIn([HISTORY_OF_VIOLENCE_FQN, 0]),
    [HISTORY_OF_VIOLENCE_TEXT_FQN]: data.getIn([HISTORY_OF_VIOLENCE_TEXT_FQN, 0]),
    [SCALE_1_TO_10_FQN]: data.getIn([SCALE_1_TO_10_FQN, 0]),
    [PERSON_ID_FQN]: data.getIn([PERSON_ID_FQN, 0]),
    [PERSON_FIRST_NAME_FQN]: data.getIn([PERSON_FIRST_NAME_FQN, 0]),
    [PERSON_MIDDLE_NAME_FQN]: data.getIn([PERSON_MIDDLE_NAME_FQN, 0]),
    [PERSON_LAST_NAME_FQN]: data.getIn([PERSON_LAST_NAME_FQN, 0]),
    [PERSON_SEX_FQN]: data.getIn([PERSON_SEX_FQN, 0]),
    [PERSON_RACE_FQN]: data.getIn([PERSON_RACE_FQN, 0]),
    [PERSON_PICTURE_FQN]: data.getIn([PERSON_PICTURE_FQN, 0]),
  };

  // special cases
  result[INJURIES_FQN] = data.get(INJURIES_FQN, List()).toJS();
  result[EMOTIONAL_STATE_FQN] = data.get(EMOTIONAL_STATE_FQN, List()).toJS();
  result[OBSERVED_BEHAVIORS_FQN] = data.get(OBSERVED_BEHAVIORS_FQN, List()).toJS();
  result[SELF_DIAGNOSIS_FQN] = data.get(SELF_DIAGNOSIS_FQN, List()).toJS();
  result[SUICIDAL_ACTIONS_FQN] = data.get(SUICIDAL_ACTIONS_FQN, List()).toJS();
  result[SUICIDE_ATTEMPT_METHOD_FQN] = data.get(SUICIDE_ATTEMPT_METHOD_FQN, List()).toJS();
  result[PHOTOS_TAKEN_OF_FQN] = data.get(PHOTOS_TAKEN_OF_FQN, List()).toJS();
  result[DIRECTED_AGAINST_FQN] = data.get(DIRECTED_AGAINST_FQN, List()).toJS();
  result[HIST_DIRECTED_AGAINST_FQN] = data.get(HIST_DIRECTED_AGAINST_FQN, List()).toJS();
  result[GENDER_FQN] = data.getIn([PERSON_SEX_FQN, 0]);
  result[RACE_FQN] = data.getIn([PERSON_RACE_FQN, 0]);

  const dob = formatAsDate(data.getIn([PERSON_DOB_FQN, 0]));
  result[DOB_FQN] = dob;
  result[PERSON_DOB_FQN] = dob;

  return result;
}

function gatherComplainantData(data :Map<*, *>) :{[key :string] :any} {

  const result = {
    [COMPLAINANT_NAME_FQN]: data.getIn([COMPLAINANT_NAME_FQN, 0]),
    [COMPLAINANT_ADDRESS_FQN]: data.getIn([COMPLAINANT_ADDRESS_FQN, 0]),
    [COMPLAINANT_RELATIONSHIP_FQN]: data.getIn([COMPLAINANT_RELATIONSHIP_FQN, 0]),
    [COMPLAINANT_PHONE_FQN]: data.getIn([COMPLAINANT_PHONE_FQN, 0]),
  };

  return result;
}

function gatherDispositionData(data :Map<*, *>) :{[key :string] :any} {

  const result = {
    [DEESCALATION_SCALE_FQN]: data.getIn([DEESCALATION_SCALE_FQN, 0]),
    [DEESCALATION_TECHNIQUES_OTHER_FQN]: data.getIn([DEESCALATION_TECHNIQUES_OTHER_FQN, 0]),
    [HOSPITAL_TRANSPORT_INDICATOR_FQN]: data.getIn([HOSPITAL_TRANSPORT_INDICATOR_FQN, 0]),
    [HOSPITAL_FQN]: data.getIn([HOSPITAL_FQN, 0]),
    [HOSPITAL_NAME_FQN]: data.getIn([HOSPITAL_NAME_FQN, 0]),
    [INCIDENT_NARRATIVE_FQN]: data.getIn([INCIDENT_NARRATIVE_FQN, 0]),
    [REFERRAL_DEST_FQN]: data.getIn([REFERRAL_DEST_FQN, 0]),
    [REFERRAL_PROVIDER_INDICATOR_FQN]: data.getIn([REFERRAL_PROVIDER_INDICATOR_FQN, 0]),
    [STABILIZED_INDICATOR_FQN]: data.getIn([STABILIZED_INDICATOR_FQN, 0]),
    [TRANSPORTING_AGENCY_FQN]: data.getIn([TRANSPORTING_AGENCY_FQN, 0]),
    [VOLUNTARY_ACTION_INDICATOR_FQN]: data.getIn([VOLUNTARY_ACTION_INDICATOR_FQN, 0]),
  };

  // special cases
  result[DISPOSITION_FQN] = data.get(DISPOSITION_FQN, List()).toJS();
  result[DEESCALATION_TECHNIQUES_FQN] = data.get(DEESCALATION_TECHNIQUES_FQN, List()).toJS();
  result[SPECIAL_RESOURCES_CALLED_FQN] = data.get(SPECIAL_RESOURCES_CALLED_FQN, List()).toJS();

  return result;
}

function gatherOfficerData(data :Map<*, *>) :{[key :string] :any} {

  const result = {
    [OFFICER_NAME_FQN]: data.getIn([OFFICER_NAME_FQN, 0]),
    [OFFICER_SEQ_ID_FQN]: data.getIn([OFFICER_SEQ_ID_FQN, 0]),
    [OFFICER_INJURIES_FQN]: data.getIn([OFFICER_INJURIES_FQN, 0]),
  };

  // special cases
  result[OFFICER_CERTIFICATION_FQN] = data.get(OFFICER_CERTIFICATION_FQN, List()).toJS();

  return result;
}

function checkboxesHelper(values :any[], value :any) :any[] {

  const index = values.indexOf(value);
  if (index === -1) {
    values.push(value);
  }
  else {
    values.splice(index, 1);
  }
  return values;
}

export {
  checkboxesHelper,
  gatherComplainantData,
  gatherConsumerData,
  gatherDispositionData,
  gatherOfficerData,
  gatherReportData,
};
